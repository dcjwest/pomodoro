{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["countDown","delay","Timer","props","className","timerType","title","onClick","updateTimer","decTimer","timerLength","incTimer","App","state","currentTimer","workLength","breakLength","timeLeft","timerRunning","alarmPlaying","setTimerLength","bind","setClock","startStopClock","switchTimers","playPauseAlarm","resetClock","timerControl","sameCurrentTimer","this","setState","minutes","Math","floor","seconds","clearInterval","setInterval","setTimeout","nextTimer","nextTimerLength","alarm","document","getElementById","pause","currentTime","play","clearTimeout","id","tenSecLeft","src","preload","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8JAGIA,EACAC,E,kFAIEC,G,MAAQ,SAACC,GAUb,OACE,yBAAKC,UAAU,gCACd,2BAAID,EAAME,UAAY,aACtB,yBAAKD,UAAU,mBACb,4BAAQE,MAAM,WAAWC,QAZ9B,WACEJ,EAAMK,YAAYL,EAAME,UAAWF,EAAMM,YAYpC,uBAAGL,UAAU,sBAEf,2BAAID,EAAMO,aACV,4BAAQJ,MAAM,WAAWC,QAZ9B,WACEJ,EAAMK,YAAYL,EAAME,UAAWF,EAAMQ,YAYpC,uBAAGP,UAAU,wBAwNPQ,E,YA9Mb,WAAYT,GAAQ,IAAD,8BACjB,4CAAMA,KAEDU,MAAQ,CACXC,aAAc,OACdC,WAAY,GACZC,YAAa,EACbC,SAAU,KACVC,cAAc,EACdC,cAAc,GAGhB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBACtB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBACpB,EAAKI,eAAiB,EAAKA,eAAeJ,KAApB,gBACtB,EAAKK,WAAa,EAAKA,WAAWL,KAAhB,gBAjBD,E,4EAsBJhB,EAAWsB,GAExB,IAAIC,EAAmBvB,IAAcwB,KAAKhB,MAAMC,aAIhD,OAAOa,GACL,IAAK,iBAOH,YANAE,KAAKC,SAAS,CACZf,WAAYc,KAAKhB,MAAME,WAAa,EAAGc,KAAKhB,MAAME,WAAa,EAAIc,KAAKhB,MAAME,WAC9EE,SAAUW,GACRC,KAAKhB,MAAMI,SAAW,GAAIY,KAAKhB,MAAMI,SAAW,GAC9CY,KAAKhB,MAAMI,WAInB,IAAK,iBAOH,YANAY,KAAKC,SAAS,CACZf,WAAYc,KAAKhB,MAAME,WAAa,GAAIc,KAAKhB,MAAME,WAAa,EAAIc,KAAKhB,MAAME,WAC/EE,SAAUW,GACRC,KAAKhB,MAAMI,SAAW,KAAMY,KAAKhB,MAAMI,SAAW,GAChDY,KAAKhB,MAAMI,WAInB,IAAK,kBAOH,YANAY,KAAKC,SAAS,CACZd,YAAaa,KAAKhB,MAAMG,YAAc,EAAGa,KAAKhB,MAAMG,YAAc,EAAIa,KAAKhB,MAAMG,YACjFC,SAAUW,GACRC,KAAKhB,MAAMI,SAAW,GAAIY,KAAKhB,MAAMI,SAAW,GAC9CY,KAAKhB,MAAMI,WAInB,IAAK,kBAOH,YANAY,KAAKC,SAAS,CACZd,YAAaa,KAAKhB,MAAMG,YAAc,GAAIa,KAAKhB,MAAMG,YAAc,EAAIa,KAAKhB,MAAMG,YAClFC,SAAUW,GACRC,KAAKhB,MAAMI,SAAW,KAAMY,KAAKhB,MAAMI,SAAW,GAChDY,KAAKhB,MAAMI,WAGnB,QAAS,U,iCAMX,IAAIc,EAAUC,KAAKC,MAAMJ,KAAKhB,MAAMI,SAAW,IAC3CiB,EAAUL,KAAKhB,MAAMI,SAAqB,GAAVc,EAMpC,OAFAG,EAAUA,EAAU,GAAI,IAAMA,EAAUA,EAElC,GAAN,OAHAH,EAAUA,EAAU,GAAI,IAAMA,EAAUA,EAGxC,YAAqBG,K,uCAGL,IAAD,OAEZL,KAAKhB,MAAMK,cACZW,KAAKC,SAAS,CACZZ,cAAc,IAEhBiB,cAAcnC,KAId6B,KAAKC,SAAS,CACZZ,cAAc,IAEhBlB,EAAYoC,aAAY,WAEnB,EAAKvB,MAAMI,SAAW,EACvB,EAAKa,SAAS,CACZb,SAAU,EAAKJ,MAAMI,SAAW,KAKlC,EAAKQ,iBACLU,cAAcnC,GACdC,EAAQoC,WAAW,EAAKb,aAAc,QAEvC,Q,qCAML,IAAIV,EAAee,KAAKhB,MAAMC,aAC1BwB,EAA6B,SAAjBxB,EAAyB,QAAU,OAC/CyB,EAAmC,SAAjBzB,EAAyBe,KAAKhB,MAAME,WAAac,KAAKhB,MAAMG,YAGlFa,KAAKC,SAAS,CACZhB,aAAcwB,EACdrB,SAA4B,GAAlBsB,EACVrB,cAAc,EACdC,cAAc,IAIhBU,KAAKN,mB,uCAIL,IAAMiB,EAAQC,SAASC,eAAe,QAElCb,KAAKhB,MAAMM,cACbqB,EAAMG,QACNH,EAAMI,YAAc,IAGpBJ,EAAMI,YAAc,EACpBJ,EAAMK,QAGRhB,KAAKC,SAAS,CACZX,cAAeU,KAAKhB,MAAMM,iB,mCAMxBU,KAAKhB,MAAMM,eACbU,KAAKJ,iBACLqB,aAAa7C,IAIfkC,cAAcnC,GACd6B,KAAKC,SAAS,CACZhB,aAAc,OACdC,WAAY,GACZC,YAAa,EACbC,SAAU,KACVC,cAAc,EACdC,cAAc,M,mCAMhB,OAAOU,KAAKhB,MAAMI,SAAW,GAAI,GAAK,e,+BAItC,OACE,yBAAK8B,GAAG,OACN,wBAAIA,GAAG,SAAP,kBACA,yBAAKA,GAAG,iBAAiB3C,UAAU,kBACjC,kBAAC,EAAD,CACEC,UAAU,OACVM,SAAS,iBACTF,SAAS,iBACTC,YAAamB,KAAKhB,MAAME,WACxBP,YAAaqB,KAAKT,iBACpB,kBAAC,EAAD,CACEf,UAAU,QACVM,SAAS,kBACTF,SAAS,kBACTC,YAAamB,KAAKhB,MAAMG,YACxBR,YAAaqB,KAAKT,kBAEtB,wBAAI2B,GAAG,eAAelB,KAAKhB,MAAMC,cACjC,yBAAKiC,GAAG,aAAa3C,UAAU,kBAC7B,yBAAK2C,GAAG,YAAY3C,UAAWyB,KAAKmB,cAAenB,KAAKP,aAE1D,yBAAKyB,GAAG,iBAAiB3C,UAAU,kBACjC,4BAAQ2C,GAAG,aAAazC,MAAM,aAAaC,QAASsB,KAAKN,gBACvD,uBAAGnB,UAAU,eACb,uBAAGA,UAAU,iBAEf,4BAAQ2C,GAAG,QAAQzC,MAAM,QAAQC,QAASsB,KAAKH,YAC7C,uBAAGtB,UAAU,oBAGjB,2BAAO2C,GAAG,OAAOE,IAAI,wBAAwBC,QAAQ,c,GA1M3CC,IAAMC,WCvBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlB,SAASC,eAAe,SD2H3C,kBAAmBkB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7d25baf2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nlet countDown; // Counter to track time left on clock\nlet delay; // Handle delay between switching timers\n\n\n// Work / Break Timer components to increment/decrement session timelengths\nconst Timer = (props) => {\n\n  function decreaseTimer() {\n    props.updateTimer(props.timerType, props.decTimer);\n  }\n\n  function increaseTimer() {\n    props.updateTimer(props.timerType, props.incTimer);\n  }\n\n  return(\n    <div className=\"timer-control flex-container\">\n     <p>{props.timerType + \" Duration\"}</p>\n     <div className=\"timer-btn-group\">\n       <button title=\"Decrease\" onClick={decreaseTimer}>\n         <i className=\"fa fa-arrow-down\"></i>\n       </button>\n       <p>{props.timerLength}</p>\n       <button title=\"Increase\" onClick={increaseTimer}>\n         <i className=\"fa fa-arrow-up\"></i>\n       </button>\n     </div>\n   </div>\n  );\n}\n\n// Main App component\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentTimer: \"Work\",\n      workLength: 25, // Work duration in minutes\n      breakLength: 5, // Break duration in minutes\n      timeLeft: 1500, // Time on the clock in seconds\n      timerRunning: false,\n      alarmPlaying: false\n    }\n\n    this.setTimerLength = this.setTimerLength.bind(this);\n    this.setClock = this.setClock.bind(this);\n    this.startStopClock = this.startStopClock.bind(this);\n    this.switchTimers = this.switchTimers.bind(this);\n    this.playPauseAlarm = this.playPauseAlarm.bind(this);\n    this.resetClock = this.resetClock.bind(this);\n  }\n\n  // Function definitions\n\n  setTimerLength(timerType, timerControl) {\n    // If current timer on the clock is the same as the one whose controls are being clicked make changes to both\n    let sameCurrentTimer = timerType === this.state.currentTimer? true : false;\n\n    /* Decrease or increase timer durations (and clock if applicable) accordingly.\n    Timer duration changes are in minutes; clock changes in seconds */\n    switch(timerControl) {\n      case \"work-decrement\":\n        this.setState({\n          workLength: this.state.workLength > 1? this.state.workLength - 1 : this.state.workLength,\n          timeLeft: sameCurrentTimer?\n            this.state.timeLeft > 60? this.state.timeLeft - 60 : this.state.timeLeft\n            : this.state.timeLeft\n        });\n        return;\n\n      case \"work-increment\":\n        this.setState({\n          workLength: this.state.workLength < 60? this.state.workLength + 1 : this.state.workLength,\n          timeLeft: sameCurrentTimer?\n            this.state.timeLeft < 3600? this.state.timeLeft + 60 : this.state.timeLeft\n            : this.state.timeLeft\n        });\n        return;\n\n      case \"break-decrement\":\n        this.setState({\n          breakLength: this.state.breakLength > 1? this.state.breakLength - 1 : this.state.breakLength,\n          timeLeft: sameCurrentTimer?\n            this.state.timeLeft > 60? this.state.timeLeft - 60 : this.state.timeLeft\n            : this.state.timeLeft\n        });\n        return;\n\n      case \"break-increment\":\n        this.setState({\n          breakLength: this.state.breakLength < 60? this.state.breakLength + 1 : this.state.breakLength,\n          timeLeft: sameCurrentTimer?\n            this.state.timeLeft < 3600? this.state.timeLeft + 60 : this.state.timeLeft\n            : this.state.timeLeft\n        });\n        return;\n      default: return;\n    }\n  }\n\n  setClock() {\n    // Calculate remaining minutes and seconds. Note: state's \"timeLeft\" given in seconds\n    let minutes = Math.floor(this.state.timeLeft / 60);\n    let seconds = this.state.timeLeft - minutes * 60;\n\n    // Set clock minutes and seconds as strings\n    minutes = minutes < 10? \"0\" + minutes : minutes;\n    seconds = seconds < 10? \"0\" + seconds : seconds;\n\n    return `${minutes}:${seconds}`;\n  }\n\n  startStopClock() {\n    // If clock is currently running, pause it by clearing the timer counter\n    if(this.state.timerRunning) {\n      this.setState({\n        timerRunning: false\n      });\n      clearInterval(countDown);\n    }\n    // If the clock is currently stopped, start the count down\n    else {\n      this.setState({\n        timerRunning: true\n      });\n      countDown = setInterval(() => {\n        // Continuously update state by removing one second every second until timeLeft is zero\n        if(this.state.timeLeft > 0) {\n          this.setState({\n            timeLeft: this.state.timeLeft - 1\n          });\n        }\n        // Once timeLeft reaches zero, play the alarm and switch the timers\n        else {\n          this.playPauseAlarm();\n          clearInterval(countDown);\n          delay = setTimeout(this.switchTimers, 4000);\n        }\n      }, 1000);\n    }\n  }\n\n  switchTimers() {\n    // First determine the next timer and get its duration\n    let currentTimer = this.state.currentTimer;\n    let nextTimer = currentTimer === \"Work\"? \"Break\" : \"Work\";\n    let nextTimerLength = currentTimer === \"Work\"? this.state.workLength : this.state.breakLength;\n\n    // Update state with next timer's parameters\n    this.setState({\n      currentTimer: nextTimer,\n      timeLeft: nextTimerLength * 60,\n      timerRunning: false,\n      alarmPlaying: false\n    });\n\n    // Start the clock again with the next timer\n    this.startStopClock();\n  }\n\n  playPauseAlarm() {\n    const alarm = document.getElementById(\"beep\");\n\n    if (this.state.alarmPlaying) {\n      alarm.pause();\n      alarm.currentTime = 0;\n    }\n    else {\n      alarm.currentTime = 0;\n      alarm.play();\n    }\n\n    this.setState({\n      alarmPlaying: !this.state.alarmPlaying\n    });\n  }\n\n  resetClock() {\n    // If user resets clock while alarm is playing, turn it off\n    if (this.state.alarmPlaying) {\n      this.playPauseAlarm();\n      clearTimeout(delay);\n    }\n\n    // Stop the timer counter and set state to default settings\n    clearInterval(countDown);\n    this.setState({\n      currentTimer: \"Work\",\n      workLength: 25,\n      breakLength: 5,\n      timeLeft: 1500,\n      timerRunning: false,\n      alarmPlaying: false\n    });\n  }\n\n  // Change clock font color to red if time left is less than 10 seconds \n  tenSecLeft() {\n    return this.state.timeLeft > 10? '' : 'tenSecLeft';\n  }\n\n  render() {\n    return (\n      <div id=\"app\">\n        <h1 id=\"title\">Pomodoro Clock</h1>\n        <div id=\"timer-controls\" className=\"flex-container\">\n          <Timer\n            timerType=\"Work\"\n            incTimer=\"work-increment\"\n            decTimer=\"work-decrement\"\n            timerLength={this.state.workLength}\n            updateTimer={this.setTimerLength} />\n          <Timer\n            timerType=\"Break\"\n            incTimer=\"break-increment\"\n            decTimer=\"break-decrement\"\n            timerLength={this.state.breakLength}\n            updateTimer={this.setTimerLength} />\n        </div>\n        <h2 id=\"clock-label\">{this.state.currentTimer}</h2>\n        <div id=\"clock-face\" className=\"flex-container\">\n          <div id=\"time-left\" className={this.tenSecLeft()}>{this.setClock()}</div>\n        </div>\n        <div id=\"clock-controls\" className=\"flex-container\">\n          <button id=\"start-stop\" title=\"Start/Stop\" onClick={this.startStopClock}>\n            <i className=\"fa fa-play\"></i>\n            <i className=\"fa fa-pause\"></i>\n          </button>\n          <button id=\"reset\" title=\"Reset\" onClick={this.resetClock}>\n            <i className=\"fa fa-retweet\"></i>\n          </button>\n        </div>\n        <audio id=\"beep\" src=\"https://goo.gl/65cBl1\" preload=\"auto\"></audio>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}